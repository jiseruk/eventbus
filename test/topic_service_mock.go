package test

import app "github.com/wenance/wequeue-management_api/app"
import client "github.com/wenance/wequeue-management_api/app/client"
import mock "github.com/stretchr/testify/mock"
import model "github.com/wenance/wequeue-management_api/app/model"

// TopicServiceMock is an autogenerated mock type for the TopicServiceMock type
type TopicServiceMock struct {
	mock.Mock
}

// CreateTopic provides a mock function with given fields: name, engine
func (_m *TopicServiceMock) CreateTopic(name string, engine client.EngineService) (*model.Topic, *app.APIError) {
	ret := _m.Called(name, engine)

	var r0 *model.Topic
	if rf, ok := ret.Get(0).(func(string, client.EngineService) *model.Topic); ok {
		r0 = rf(name, engine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Topic)
		}
	}

	var r1 *app.APIError
	if rf, ok := ret.Get(1).(func(string, client.EngineService) *app.APIError); ok {
		r1 = rf(name, engine)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*app.APIError)
		}
	}

	return r0, r1
}

// GetTopic provides a mock function with given fields: name
func (_m *TopicServiceMock) GetTopic(name string) (*model.Topic, *app.APIError) {
	ret := _m.Called(name)

	var r0 *model.Topic
	if rf, ok := ret.Get(0).(func(string) *model.Topic); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Topic)
		}
	}

	var r1 *app.APIError
	if rf, ok := ret.Get(1).(func(string) *app.APIError); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*app.APIError)
		}
	}

	return r0, r1
}
